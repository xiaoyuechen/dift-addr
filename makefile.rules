#
# Copyright (C) 2022 Xiaoyue Chen
# Copyright (C) 2012-2020 Intel Corporation
# SPDX-License-Identifier: MIT
#

##############################################################
#
# This file includes all the test targets as well as all the
# non-default build rules and test recipes.
#
##############################################################


##############################################################
#
# Test targets
#
##############################################################

###### Place all generic definitions here ######

# This defines tests which run tools of the same name.  This is simply for convenience to avoid
# defining the test name twice (once in TOOL_ROOTS and again in TEST_ROOTS).
# Tests defined here should not be defined in TOOL_ROOTS and TEST_ROOTS.
TEST_TOOL_ROOTS :=

# This defines the tests to be run that were not already defined in TEST_TOOL_ROOTS.
TEST_ROOTS := utest.all

# This defines the tools which will be run during the the tests, and were not already defined in
# TEST_TOOL_ROOTS.
TOOL_ROOTS := dift-addr

# This defines the static analysis tools which will be run during the the tests. They should not
# be defined in TEST_TOOL_ROOTS. If a test with the same name exists, it should be defined in
# TEST_ROOTS.
# Note: Static analysis tools are in fact executables linked with the Pin Static Analysis Library.
# This library provides a subset of the Pin APIs which allows the tool to perform static analysis
# of an application or dll. Pin itself is not used when this tool runs.
SA_TOOL_ROOTS :=

# This defines all the applications that will be run during the tests.
APP_ROOTS := a-b-i fibonacci aos sort secwatch-demon

# This defines any additional object files that need to be compiled.
OBJECT_ROOTS :=

# This defines any additional dlls (shared objects), other than the pintools, that need to be compiled.
DLL_ROOTS :=

# This defines any static libraries (archives), that need to be built.
LIB_ROOTS :=

# This defines any unit tests that need to be build
UTEST_ROOTS := taint-table operand

UTESTS := $(UTEST_ROOTS:%=$(OBJDIR)%.utest)

###### Handle exceptions here (OS/arch related) ######

RUNNABLE_TESTS := $(TEST_TOOL_ROOTS) $(TEST_ROOTS)

###### Handle exceptions here (bugs related) ######

###### Define the sanity subset ######

# This defines the list of tests that should run in sanity. It should include all the tests listed in
# TEST_TOOL_ROOTS and TEST_ROOTS excluding only unstable tests.
SANITY_SUBSET := $(TEST_TOOL_ROOTS) $(TEST_ROOTS)


##############################################################
#
# Test recipes
#
##############################################################

# This section contains recipes for tests other than the default.
# See makefile.default.rules for the default test rules.
# All tests in this section should adhere to the naming convention: <testname>.test

%.test: $(OBJDIR)dift-addr$(PINTOOL_SUFFIX)

all.utest.test: $(UTEST_ROOTS:%=%.utest.test)

%.utest.test: $(OBJDIR)%.utest
	$(SET_DLL_PATH) $<

a-b-i.test: $(OBJDIR)a-b-i$(EXE_SUFFIX)
	$(PIN) -t $(OBJDIR)dift-addr.so -dumpperiod 10000 -- $(OBJDIR)a-b-i$(EXE_SUFFIX)

fibonacci.test: $(OBJDIR)fibonacci$(EXE_SUFFIX)
	$(PIN) -t $(OBJDIR)dift-addr$(PINTOOL_SUFFIX) -filter_no_shared_libs -- $(OBJDIR)fibonacci$(EXE_SUFFIX) 1000

aos.test: $(OBJDIR)aos$(EXE_SUFFIX)
	$(PIN) -t $(OBJDIR)dift-addr$(PINTOOL_SUFFIX) -filter_no_shared_libs -- $(OBJDIR)aos$(EXE_SUFFIX)

sort.test: $(OBJDIR)sort$(EXE_SUFFIX)
	$(PIN) -t $(OBJDIR)dift-addr$(PINTOOL_SUFFIX) -filter_no_shared_libs -- $(OBJDIR)sort$(EXE_SUFFIX)

hashset.test: $(OBJDIR)hashset$(EXE_SUFFIX)
	$(PIN) -t $(OBJDIR)dift-addr$(PINTOOL_SUFFIX) -filter_no_shared_libs -- $(OBJDIR)hashset$(EXE_SUFFIX)

ls.test:
	$(PIN) -t $(OBJDIR)dift-addr$(PINTOOL_SUFFIX) -o "$@.out" -dumpperiod 10000 -- ls -tal

secwatch-demon.test: $(OBJDIR)secwatch-demon$(EXE_SUFFIX)
	$(PIN) -t $(OBJDIR)dift-addr$(PINTOOL_SUFFIX) -watch -o "$@.out" -- $< "sEcRetas"

##############################################################
#
# Build rules
#
##############################################################

# This section contains the build rules for all binaries that have special build rules.
# See makefile.default.rules for the default build rules.

utests: dir $(UTESTS)

$(OBJDIR)%.utest: $(OBJDIR)%.utest$(OBJ_SUFFIX) $(OBJDIR)%$(OBJ_SUFFIX)
	$(LINKER) $(SATOOL_LDFLAGS) $(LINK_EXE)$@ $^ $(SATOOL_LPATHS) $(SATOOL_LIBS)

$(OBJDIR)operand$(OBJ_SUFFIX): operand.cpp operand.hpp

$(OBJDIR)propagation$(OBJ_SUFFIX): propagation.cpp propagation.h taint-table.hpp

$(OBJDIR)instrument-propagation$(OBJ_SUFFIX): instrument-propagation.cpp propagation.h operand.hpp util.hpp

$(OBJDIR)taint-table$(OBJ_SUFFIX): taint-table.c taint-table.h

$(OBJDIR)dift-addr$(PINTOOL_SUFFIX): $(OBJDIR)dift-addr$(OBJ_SUFFIX) $(OBJDIR)operand$(OBJ_SUFFIX) \
$(OBJDIR)instrument-propagation$(OBJ_SUFFIX) $(OBJDIR)propagation$(OBJ_SUFFIX) $(OBJDIR)util$(OBJ_SUFFIX) $(OBJDIR)taint-table$(OBJ_SUFFIX)
	$(LINKER) $(TOOL_LDFLAGS) $(LINK_EXE)$@ $^ $(TOOL_LPATHS) $(TOOL_LIBS)

.PHONY: plot
plot:
	python3 plot.py < dift-addr.out

$(OBJDIR)secwatch$(OBJ_SUFFIX): secwatch.h
	$(CC) -fPIC -c secwatch.c -o $@

$(OBJDIR)libsecwatch$(PINTOOL_SUFFIX): $(OBJDIR)secwatch$(OBJ_SUFFIX)
	$(CC) -fPIC -shared -Wl,-soname,libsecwatch$(PINTOOL_SUFFIX) -o $@ $^ -lc


$(OBJDIR)secwatch-demon$(OBJ_SUFFIX): secwatch-demon.c
	$(CC) -g -O0 -mno-sse -c -o $@ $<

$(OBJDIR)secwatch-demon$(EXE_SUFFIX): $(OBJDIR)secwatch-demon.o $(OBJDIR)libsecwatch$(PINTOOL_SUFFIX)
	$(CC) -L$(OBJDIR) -lsecwatch -lcrypto -Wl,-rpath='$${ORIGIN}' -o $@ $<
